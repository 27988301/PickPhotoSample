package com.werb.pickphotoview.adapter;import android.content.Context;import android.net.Uri;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.Toast;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.werb.pickphotoview.PickPhotoActivity;import com.werb.pickphotoview.R;import com.werb.pickphotoview.util.PickConfig;import com.werb.pickphotoview.util.PickUtils;import java.util.ArrayList;import java.util.List;/** * Created by wanbo on 2016/12/31. */public class PickGridAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {    private List<String> imagePaths;    private boolean isShowCamera;    private int spanCount;    private int maxSelectSize;    private List<String> selectPath;    private PickPhotoActivity context;    private View.OnClickListener imgClick;    public PickGridAdapter(Context c, List<String> imagePaths, boolean isShowCamera, int spanCount, int maxSelectSize,View.OnClickListener imgClick) {        this.context = (PickPhotoActivity) c;        this.imagePaths = imagePaths;        this.isShowCamera = isShowCamera;        this.spanCount = spanCount;        this.maxSelectSize = maxSelectSize;        this.imgClick = imgClick;        selectPath = new ArrayList<>();    }    @Override    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        return new GridImageViewHolder(LayoutInflater.from(context).inflate(R.layout.item_grid_layout, parent, false));    }    @Override    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {        if (position == PickConfig.CAMERA_TYPE) {        } else {            String path = imagePaths.get(position);            GridImageViewHolder gridImageViewHolder = (GridImageViewHolder) holder;            gridImageViewHolder.bindItem(path);        }    }    @Override    public int getItemViewType(int position) {        if (isShowCamera) {            return PickConfig.CAMERA_TYPE;        } else {            return position;        }    }    @Override    public int getItemCount() {        if (isShowCamera) {            return imagePaths.size() + 1;        } else {            return imagePaths.size();        }    }    public void updateData(List<String> paths) {        imagePaths = paths;        selectPath.clear();        notifyDataSetChanged();    }    // ViewHolder    private class GridImageViewHolder extends RecyclerView.ViewHolder {        private ImageView gridImage, selectImage;        private int scaleSize;        private FrameLayout selectLayout;        GridImageViewHolder(View itemView) {            super(itemView);            gridImage = (ImageView) itemView.findViewById(R.id.iv_grid);            selectImage = (ImageView) itemView.findViewById(R.id.iv_select);            selectLayout = (FrameLayout) itemView.findViewById(R.id.frame_select_layout);            int screenWidth = PickUtils.getInstance(context).getWidthPixels();            int space = PickUtils.getInstance(context).dp2px(PickConfig.ITEM_SPACE);            scaleSize = (screenWidth - (spanCount + 1) * space) / spanCount;            RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) gridImage.getLayoutParams();            params.width = scaleSize;            params.height = scaleSize;        }        void bindItem(final String path) {            if(selectPath.contains(path)){                select();            }else {                unSelect();            }            Glide.with(context).load(Uri.parse("file://" + path)).diskCacheStrategy(DiskCacheStrategy.ALL) .thumbnail(0.3f).dontAnimate().into(gridImage);            selectLayout.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    boolean isSelect = (boolean) selectImage.getTag(R.id.is_select);                    if (isSelect) {                        if(selectPath.contains(path)) {                            unSelect();                            selectPath.remove(path);                            context.updateSelectText(String.valueOf(selectPath.size()));                        }                    } else {                        if (selectPath.size() < maxSelectSize) {                            if(!selectPath.contains(path)){                                select();                                selectPath.add(path);                                context.updateSelectText(String.valueOf(selectPath.size()));                            }                        } else {                            Toast.makeText(context, String.format(context.getString(R.string.photo_size_limit), String.valueOf(maxSelectSize)), Toast.LENGTH_SHORT).show();                        }                    }                }            });            gridImage.setTag(R.id.image_path, path);            gridImage.setOnClickListener(imgClick);        }        void select() {            selectImage.setBackgroundDrawable(null);            selectImage.setBackgroundDrawable(context.getResources().getDrawable(R.mipmap.ic_select));            selectImage.setTag(R.id.is_select, true);        }        void unSelect() {            selectImage.clearAnimation();            selectImage.setBackgroundDrawable(null);            selectImage.setBackgroundDrawable(context.getResources().getDrawable(R.mipmap.ic_un_select));            selectImage.setTag(R.id.is_select, false);        }    }    public List<String> getSelectPath() {        return selectPath;    }}